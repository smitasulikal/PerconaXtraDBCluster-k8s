def awsCredentials = [[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_personal_id']]

pipeline {

   agent any



   // options {

               //     withAWS(profile:'default')

   // }



   parameters {

       //string(name: 'environment', defaultValue: 'default', description: 'Workspace/environment file to use for deployment')

       //string(name: 'version', defaultValue: '1.14.0', description: 'Version variable to pass to Terraform')

       booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')

       password (name: 'AWS_ACCESS_KEY_ID')

       password (name: 'AWS_SECRET_ACCESS_KEY')

   }

   options {

       disableConcurrentBuilds()

       parallelsAlwaysFailFast()

       timestamps()

       withCredentials(awsCredentials)

   }



   environment {

       AWS_ACCESS_KEY_ID     = "${params.AWS_ACCESS_KEY_ID}"

       AWS_SECRET_ACCESS_KEY = "${params.AWS_SECRET_ACCESS_KEY}"

       TF_IN_AUTOMATION      = '1'

   }



   stages {

       stage('Plan') {

           steps {

               script {

                   currentBuild.displayName = params.version

               }

               sh 'terraform init -input=false'

               //sh 'terraform workspace select ${environment}'

               sh "terraform plan -input=false -out tfplan"

               //-var 'version=${params.version}' --var-file=environments/${params.environment}.tfvars"

               sh 'terraform show -no-color tfplan > tfplan.txt'

           }

       }



       stage('Approval') {

           when {

               not {

                   equals expected: true, actual: params.autoApprove

               }

           }



           steps {

               script {

                   def plan = readFile 'tfplan.txt'

                   input message: "Do you want to apply the plan?",

                       parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]

               }

           }

       }



       stage('Apply') {

           steps {

               sh "terraform apply -input=false tfplan"

           }

       }



      stage('Destroy') {

           steps {

               sh "terraform destroy --auto-approve -input=false"

           }

       }

   }



   post {

       always {

           archiveArtifacts artifacts: 'tfplan.txt'

       }

   }
